package startup;

import model.BitmapHour;
import model.Data;
import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.Ignition;
import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.query.QueryCursor;
import org.apache.ignite.cache.query.SqlFieldsQuery;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.DataStorageConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import java.util.Collection;
import java.util.List;

/** This file was generated by Ignite Web Console (06/29/2018, 14:12) **/
public class ClientNodeSpringStartup {
    /**
     * Start up node with specified configuration.
     * 
     * @param args Command line arguments, none required.
     * @throws Exception If failed.
     **/
    public static void main(String[] args) throws Exception {

        Logger.getLogger("org").setLevel(Level.OFF);
        Logger.getLogger("akka").setLevel(Level.OFF);

        System.setProperty("IGNITE_QUIET", "false");

        IgniteConfiguration cfg = new IgniteConfiguration();

// Ignite persistence configuration.
        DataStorageConfiguration storageCfg = new DataStorageConfiguration();

// Enabling the persistence.
        storageCfg.getDefaultDataRegionConfiguration().setPersistenceEnabled(true);

// Applying settings.
        cfg.setDataStorageConfiguration(storageCfg);
        cfg.setClientMode(true);
        Ignite ignite= Ignition.start("BitmapCluster-client.xml");


        //   Ignite ignite=Ignition.start("BitmapCluster-client.xml");


        CacheConfiguration cfgc = new CacheConfiguration("CACHE1");
        cfgc.setCacheMode(CacheMode.PARTITIONED);
        cfgc.setAtomicityMode(CacheAtomicityMode.TRANSACTIONAL);

//        cfgc.setSqlSchema("CACHE");

        IgniteCache<Double, Data> bitmaphour = ignite.getOrCreateCache("DataCache");
//        bitmaphour.query(new SqlFieldsQuery("CREATE OR REPLACE TABLE BITMAP " +
//                "(id int primary key, avgW blob, avgV blob, sensor_id varchar)").setSchema("PUBLIC"));



//        Collection<List<?>> cursor1 =
//                bitmaphour.query(
//                        new SqlFieldsQuery("select * from Data")).getAll();
//
//        System.out.println("HER   "+ cursor1);
//        for (List<?> row : cursor1) {
//            System.out.println("HER  "+row.get(0));
//        }

        Data bm= new Data();
        byte[] bt1= new byte[]{(byte)0xe0,(byte)0xe0};
        Double bt=123.0;
        bm.setAvgV(bt);
        bm.setAvgW(bt);
        bm.setGranularity("minute123131");
        bm.setTS(145.89745);
        bm.setSensor_id("power_k_seil_a");

//        System.out.println(ignite.cacheNames());
        bm.setId(12L);
        bitmaphour.put(123D,bm);
        Data v=bitmaphour.get(123D);
        bitmaphour.query(
                new SqlFieldsQuery("insert into Data (avgW,avgV,sensor_id,granularity,id,TS) values(112.0,134.0,'power_k_seil_l','hour',128,143.1241)"));
        QueryCursor<List<?>> cursor=
                bitmaphour.query(
             new SqlFieldsQuery("select * from Data"));
        System.out.println("PRINTED CURSOR "+ cursor.getAll());

        bitmaphour.destroy();

    }
}